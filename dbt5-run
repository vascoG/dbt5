#!/bin/bash

#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-5 Authors
#

trap 'echo "Test was interrupted by Control-C."; stop_processes' INT
trap 'echo "Test was interrupted. Got TERM signal."; stop_processes' TERM

do_sleep()
{
	TIME="${1}"
	shift
    echo "${*}"
    sleep "${TIME}"
}

make_directories()
{
	COMMAND=""
	HOST=${1}
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	fi
	${COMMAND} mkdir -p ${OUTPUT_DIR}
	${COMMAND} mkdir -p ${BH_OUTPUT_DIR}
	${COMMAND} mkdir -p ${MEE_OUTPUT_DIR}
	${COMMAND} mkdir -p ${DRIVER_OUTPUT_DIR}
	${COMMAND} mkdir -p ${DB_OUTPUT_DIR}
}

stat_collection()
{
	if [ $STATS -ne 1 ]; then
		return
	fi

	ARGS=$1

	if [ "${CONFIGFILE}" = "" ]; then
		# If the this is a 1-tier test, system stats will be saved only in the db
		# directory.
		if [ -n "${DB_HOSTNAME}" ] && [ ! "${DB_HOSTNAME}" = "localhost" ];
		then
			which ts ts-profile > /dev/null 2>&1
			RC=$?
			if [ $RC -gt 1 ]; then
				printf "WARNING: touchstone tools not found for driver system "
				echo "stats collection"
			else
				eval "ts sysstat -o ${DRIVER_OUTPUT_DIR}/$(hostname)/sysstat \
						${ARGS} &"
			fi
		fi

		# Use the given hostname if the database is a service.
		if [ ${DBAAS} -ne 1 ]; then
			HOSTNAME=$(eval "${DB_COMMAND} hostname")
		else
			HOSTNAME=${DB_HOSTNAME}
		fi
		# Don't collect system stats from the database system if the database
		# is a service.
		if [ $DBAAS -eq 0 ]; then
			eval "${DB_COMMAND} which ts ts-sysstat" > /dev/null 2>&1
			RC=$?
			if [ $RC -gt 1 ]; then
				printf "WARNING: touchstone tools not found for system stats "
				printf "collection on %s\n" "${HOSTNAME}"
			else
				eval "${DB_COMMAND} ts sysstat \
						-o ${DB_OUTPUT_DIR}/${HOSTNAME}/sysstat ${ARGS} &"
			fi
		fi

		eval "${DB_COMMAND} which ts ts-${DBMS}-stat" > /dev/null 2>&1
		RC=$?
		if [ $RC -gt 1 ]; then
			printf "WARNING: touchstone tools not found for database stats "
			printf "collection for RDBMS %s on system %s\n" \
					"${DBMS}" "${HOSTNAME}"
		else
			eval "${DB_COMMAND} ts ${DBMS}-stat \
					-o ${DB_OUTPUT_DIR}/${HOSTNAME}/dbstat ${ARGS} &"
		fi
	else
		LIST=""
		DRIVERS="$(toml get "${CONFIGFILE}" . | jq -r '.driver | length')"
		for INDEX in $(seq 0 $(( DRIVERS - 1 ))); do
			ADDR="$(toml get "${CONFIGFILE}" driver | \
				jq -r ".[${INDEX}].driver_addr")"
			LIST="${LIST} ${ADDR}"
		done
		LIST="$(echo "${LIST}" | \
			awk -v RS='[[:space:]]+' '!a[$0]++{printf "%s%s", $0, RT}')"
		for SYSTEM in ${LIST}; do
			if [ ! "${SYSTEM}" = "localhost" ]; then
				CMD="${SSH} ${SYSTEM}"
			else
				CMD=""
			fi
			HOSTNAME=$(eval "${CMD} hostname")
			eval "${CMD} ts sysstat \
					-o ${DRIVER_OUTPUT_DIR}/${HOSTNAME}/sysstat ${ARGS} &"
		done

		LIST=""
		MARKETS="$(toml get "${CONFIGFILE}" . | jq -r '.market | length')"
		for INDEX in $(seq 0 $(( MARKETS - 1 ))); do
			ADDR="$(toml get "${CONFIGFILE}" market | \
				jq -r ".[${INDEX}].market_addr")"
			LIST="${LIST} ${ADDR}"
		done
		LIST="$(echo "${LIST}" | \
			awk -v RS='[[:space:]]+' '!a[$0]++{printf "%s%s", $0, RT}')"
		for SYSTEM in ${LIST}; do
			if [ ! "${SYSTEM}" = "localhost" ]; then
				CMD="${SSH} ${SYSTEM}"
			else
				CMD=""
			fi
			HOSTNAME=$(eval "${CMD} hostname")
			eval "${CMD} ts sysstat \
					-o ${MEE_OUTPUT_DIR}/${HOSTNAME}/sysstat ${ARGS} &"
		done

		DBLIST=""
		LIST=""
		BROKERAGES="$(toml get "${CONFIGFILE}" . | jq -r '.brokerage | length')"
		for INDEX in $(seq 0 $(( BROKERAGES - 1 ))); do
			ADDR="$(toml get "${CONFIGFILE}" brokerage | \
				jq -r ".[${INDEX}].brokerage_addr")"
			LIST="${LIST} ${ADDR}"
			ADDR="$(toml get "${CONFIGFILE}" brokerage | \
				jq -r ".[${INDEX}].database_addr")"
			DBLIST="${DBLIST} ${ADDR}"
		done
		LIST="$(echo "${LIST}" | \
			awk -v RS='[[:space:]]+' '!a[$0]++{printf "%s%s", $0, RT}')"
		for SYSTEM in ${LIST}; do
			if [ ! "${SYSTEM}" = "localhost" ]; then
				CMD="${SSH} ${SYSTEM}"
			else
				CMD=""
			fi
			HOSTNAME=$(eval "${CMD} hostname")
			eval "${CMD} ts sysstat \
					-o ${BH_OUTPUT_DIR}/${HOSTNAME}/sysstat ${ARGS} &"
		done

		DBS="$(toml get "${CONFIGFILE}" . | jq -r '.database | length')"
		for INDEX in $(seq 0 $(( DBS - 1 ))); do
			ADDR="$(toml get "${CONFIGFILE}" database | \
				jq -r ".[${INDEX}].database_addr")"
			DBLIST="${DBLIST} ${ADDR}"
		done
		DBLIST="$(echo "${DBLIST}" | \
			awk -v RS='[[:space:]]+' '!a[$0]++{printf "%s%s", $0, RT}')"
		if [ ${STATS} -eq 1 ]; then
			for SYSTEM in ${DBLIST}; do
				if [ ! "${SYSTEM}" = "localhost" ]; then
					CMD="${SSH} ${SYSTEM}"
				else
					CMD=""
				fi
				HOSTNAME=$(eval "${CMD} hostname")
				if [ ${DBAAS} -ne 1 ]; then
					eval "${CMD} ts sysstat \
							-o ${DB_OUTPUT_DIR}/${HOSTNAME}/sysstat ${ARGS} &"
					eval "${CMD} ts ${DBMS}-stat \
							-o ${DB_OUTPUT_DIR}/${HOSTNAME}/dbstat ${ARGS} &"
				else
					eval "ts ${DBMS}-stat \
							-o ${DB_OUTPUT_DIR}/${HOSTNAME}/dbstat ${ARGS} &"
				fi
			done
		fi
	fi
}

stop_processes()
{
	# Stop processes in reverse order from how they were they started: drivers,
	# market exchanges, and brokerage houses.

	if [ "${CONFIGFILE}" = "" ]; then
		for DIR in driver mee bh; do
			find "${OUTPUT_DIR}/${DIR}" -name "${DIR}.pid" -print | \
					while IFS= read -r PIDFILE; do
				PID=$(cat "${PIDFILE}")
				kill -9 "${PID}" 2> /dev/null
			done
		done
	else
		LIST=""
		DRIVERS="$(toml get "${CONFIGFILE}" . | jq -r '.driver | length')"
		for INDEX in $(seq 0 $(( DRIVERS - 1 ))); do
			ADDR="$(toml get "${CONFIGFILE}" driver | \
					jq -r ".[${INDEX}].driver_addr")"
			LIST="${LIST} ${ADDR}"
		done
		LIST="$(echo "${LIST}" | \
				awk -v RS='[[:space:]]+' '!a[$0]++{printf "%s%s", $0, RT}')"
		for SYSTEM in ${LIST}; do
			if [ ! "${SYSTEM}" = "localhost" ]; then
				CMD="${SSH} ${SYSTEM}"
			else
				CMD=""
			fi
			eval "${CMD} find ${OUTPUT_DIR}/driver -name \"driver.pid\" \
					-print" | while IFS= read -r PIDFILE; do
				PID=$(eval "${CMD} cat ${PIDFILE}")
				eval "${CMD} kill -9 ${PID}" 2> /dev/null
			done
		done

		LIST=""
		MARKETS="$(toml get "${CONFIGFILE}" . | jq -r '.market | length')"
		for INDEX in $(seq 0 $(( MARKETS - 1 ))); do
			ADDR="$(toml get "${CONFIGFILE}" market | \
					jq -r ".[${INDEX}].market_addr")"
			LIST="${LIST} ${ADDR}"
		done
		LIST="$(echo "${LIST}" | \
			awk -v RS='[[:space:]]+' '!a[$0]++{printf "%s%s", $0, RT}')"
		for SYSTEM in ${LIST}; do
			if [ ! "${SYSTEM}" = "localhost" ]; then
				CMD="${SSH} ${SYSTEM}"
			else
				CMD=""
			fi
			eval "${CMD} find ${OUTPUT_DIR}/mee -name \"mee.pid\" -print" | \
					while IFS= read -r PIDFILE; do
				PID=$(eval "${CMD} cat ${PIDFILE}")
				eval "${CMD} kill -9 ${PID}" 2> /dev/null
			done
		done

		LIST=""
		BROKERAGES="$(toml get "${CONFIGFILE}" . | jq -r '.brokerage | length')"
		for INDEX in $(seq 0 $(( BROKERAGES - 1 ))); do
			ADDR="$(toml get "${CONFIGFILE}" brokerage | \
					jq -r ".[${INDEX}].brokerage_addr")"
			LIST="${LIST} ${ADDR}"
		done
		LIST="$(echo "${LIST}" | \
				awk -v RS='[[:space:]]+' '!a[$0]++{printf "%s%s", $0, RT}')"
		for SYSTEM in ${LIST}; do
			if [ ! "${SYSTEM}" = "localhost" ]; then
				CMD="${SSH} ${SYSTEM}"
			else
				CMD=""
			fi
			eval "${CMD} find ${OUTPUT_DIR}/bh -name \"bh.pid\" -print" \
					| while IFS= read -r PIDFILE; do
				PID=$(eval "${CMD} cat ${PIDFILE}")
				eval "${CMD} kill -9 ${PID}" 2> /dev/null
			done
		done
	fi
}

usage()
{
	if [ "$1" != "" ]; then
		echo
		echo "error: $1"
	fi

	cat << EOF
$(basename "${0}") is the Database Test 5 (DBT-5) workload runner

Usage:
  $(basename "${0}") [OPTIONS] DBMS DIRECTORY

General options:
  -b PARAMETERS  database PARAMETERS
  -c CUSTOMERS   active CUSTOMERS, default ${CUSTOMERS_INSTANCE}
  --config=FILE  config FILE to use for executing a test where these settings
                 will override any conflicting command line arguments
  -d SECONDS     test duration in SECONDS
  --dbaas        flag to signify that the database is a service so only collect
                 database statistics
  -f SCALE_FACTOR
                 default ${SCALE_FACTOR}
  -h HOSTNAME    database hostname, default localhost
  -l DELAY       pacing DELAY in seconds, default ${PACING_DELAY}
  -n NAME        database name, default ${DB_NAME}
  --privileged   run tests as a privileged database user
  -p PORT        database PORT number
  -r SEED        random number SEED, using this invalidates test
  --stats        collect system stats and profile
  -s DELAY       DELAY between starting threads in milliseconds,
                 default ${SLEEPY}
  --tpcetools=EGENHOME
                 EGENHOME is the directory location of the TPC-E Tools
  -t CUSTOMERS   total CUSTOMERS, default ${CUSTOMERS_TOTAL}
  -u USERS       number of USERS to emulate, default ${USERS}
  -w DAYS        initial trade DAYS, default ${ITD}
  -z COMMENT     COMMENT describing this test run

DBMS options are:
  pgsql      PostgreSQL

DIRECTORY is the path to save test results.

Database Test 5 (DBT-5) project page: https://github.com/osdldbt/dbt5
EOF
}

validate_parameter()
{
	if [ "$2" != "$3" ]; then
		usage "wrong argument '$2' for parameter '-$1'"
		exit 1
	fi
}

BROKERAGELIST=""
DB_NAME="dbt1"
DBAAS=0
DBLIST=""
DRIVERLIST=""
EGENHOME=""
CONFIGFILE=""
CUSTOMERS_INSTANCE=1000
CUSTOMERS_TOTAL=1000
ITD=1
MARKETLIST=""
SCALE_FACTOR=1
SSH="ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
SLEEPY=1000 # milliseconds
STATS=0
PACING_DELAY=0
PRIVILEGED=0
USERS=1

if [ $# -eq 0 ]; then
	usage
	exit 1
fi

if [ ! "${APPDIR}" = "" ]; then
	EGENHOME="${APPDIR}/opt/egen"
fi

# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ] ; do
	case "${1}" in
	(-b)
		shift
		DB_PARAMS="${1}"
		;;
	(-c)
		shift
		# Configured customer count
		CUSTOMERS_INSTANCE="$(echo "${1}" | grep -E "^[0-9]+$")"
		validate_parameter "c" "${1}" "${CUSTOMERS_INSTANCE}"
		;;
	(--config)
		shift
		CONFIGFILE="${1}"
		;;
	(--config=*)
		CONFIGFILE="${1#*--config=}"
		;;
	(-d)
		shift
		# duration of the test
		DURATION="$(echo "${1}" | grep -E "^[0-9]+$")"
		validate_parameter "d" "${1}" "${DURATION}"
		;;
	(--dbaas)
		DBAAS="1"
		;;
	(-f)
		shift
		SCALE_FACTOR=$(echo "${1}" | grep -E "^[0-9]+$")
		validate_parameter "f" "${1}" "${SCALE_FACTOR}"
		;;
	(-h)
		shift
		DB_HOSTNAME="${1}"
		;;
	(-l)
		shift
		PACING_DELAY="$(echo "${1}" | grep -E "^[0-9]+$")"
		validate_parameter "l" "${1}" "${PACING_DELAY}"
		;;
	(-n)
		shift
		DB_NAME="${1}"
		;;
	(-p)
		shift
		# postmaster port
		DB_PORT="$(echo "${1}" | grep -E "^[0-9]+$")"
		validate_parameter "p" "${1}" "${DB_PORT}"
		;;
	(-r)
		shift
		SEED="$(echo "${1}" | grep -E "^[0-9]+$")"
		validate_parameter "r" "${1}" "${SEED}"
		;;
	(--stats)
		STATS=1
		;;
	(-s)
		shift
		SLEEPY="$(echo "${1}" | grep -E "^[0-9]+$")"
		validate_parameter "s" "${1}" "${SLEEPY}"
		;;
	(--tpcetools)
		shift
		EGENHOME="${1}"
		;;
	(--tpcetools=?*)
		EGENHOME="${1#*--tpcetools=}"
		;;
	(-t)
		shift
		# Configured customer count
		CUSTOMERS_TOTAL="$(echo "${1}" | grep -E "^[0-9]+$")"
		validate_parameter "t" "${1}" "${CUSTOMERS_TOTAL}"
		;;
	(-u)
		shift
		USERS="$(echo "${1}" | grep -E "^[0-9]+$")"
		validate_parameter "u" "${1}" "${USERS}"
		;;
	(-V | --version)
		echo "dbt5 (Database Test 5) v0.9.4"
		exit 0
		;;
	(-w)
		shift
		# intial trade days
		ITD=$(echo "${1}" | grep -E "^[0-9]+$")
		validate_parameter "w" "${1}" "${ITD}"
		;;
	(-z)
		shift
		COMMENT="${1}"
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

DBMS="${1}"
shift

OUTPUT_DIR="${1}"
shift

# Load parameters from config file, if specified.

if [ ! "${CONFIGFILE}" = "" ]; then
	TMP="$(toml get "${CONFIGFILE}" . | jq -r '.customers')"
	if [ ! "${TMP}" = "null" ]; then
		CUSTOMERS_TOTAL="${TMP}"
	fi

	TMP="$(toml get "${CONFIGFILE}" . | jq -r '.database_name')"
	if [ ! "${TMP}" = "null" ]; then
		DB_NAME="${TMP}"
	fi

	TMP="$(toml get "${CONFIGFILE}" . | jq -r '.duration')"
	if [ ! "${TMP}" = "null" ]; then
		DURATION="${TMP}"
	fi

	TMP="$(toml get "${CONFIGFILE}" . | jq -r '.itd')"
	if [ ! "${TMP}" = "null" ]; then
		ITD="${TMP}"
	fi

	TMP="$(toml get "${CONFIGFILE}" . | jq -r '.scale_factor')"
	if [ ! "${TMP}" = "null" ]; then
		SCALE_FACTOR="${TMP}"
	fi

	TMP="$(toml get "${CONFIGFILE}" . | jq -r '.tpcetools')"
	if [ ! "${TMP}" = "null" ]; then
		EGENHOME="${TMP}"
	fi
fi

case "${DBMS}" in
(pgsql)
	export PGDATABASE="${DB_NAME}"
	;;
esac

# Check parameters.

if [ "${EGENHOME}" = "" ]; then
	usage "specify path to EGen using --tpcetools=<path>"
	exit 1
fi

if [ "x${DBMS}" = "x" ]; then
	usage "specify which dbms system to test using -a <pgsql>"
	exit 1
fi

if [ "x${DB_NAME}" = "x" ]; then
	usage "specify the database name to test using -n <dbt5>"
	exit 1
fi

if [ "x${CUSTOMERS_TOTAL}" = "x" ]; then
	usage "specify the number of total customers -t #"
	exit 1
fi

if [ "x${DURATION}" = "x" ]; then
	usage "specify the duration of the test in seconds using -d #"
	exit 1
fi

if [ "${CONFIGFILE}" = "" ] && [ "${USERS}" = "" ]; then
	usage "specify the number of users using -u #"
	exit 1
fi

if [ "x${ITD}" = "x" ]; then
	usage "specify the number of initial trade days using -w #"
	exit 1
fi

if [ "x${OUTPUT_DIR}" = "x" ]; then
	usage "specify the location for results, directory must not exist, using -o <path>"
	exit 1
fi

if [ -d "${OUTPUT_DIR}" ]; then
	echo "directory '${OUTPUT_DIR}' exists, stopping to prevent possible"
	echo "clobbering of data, please specify another -o location"
	exit 1
fi

if [ "${CONFIGFILE}" = "" ] && [ ! "x${DB_HOSTNAME}" = "x" ]; then
    DB_HOSTNAME_ARG="-h ${DB_HOSTNAME}"
fi

if [ "${CONFIGFILE}" = "" ] && [ ! "x${DB_PORT}" = "x" ]; then
    DB_PORT_ARG="-p ${DB_PORT}"
fi

if [ ! "x${SEED}" = "x" ]; then
    SEEDARG="-r ${SEED}"
	echo "WARNING: INVALID RUN BECAUSE RANDOM NUMBER SEED SPECIFIED"
fi

if [ "${CUSTOMERS_INSTANCE}" -eq 0 ]; then
	CUSTOMERS_INSTANCE="${CUSTOMERS_TOTAL}"
fi

# Determine the output directories for storing data.
BH_OUTPUT_DIR=${OUTPUT_DIR}/bh
MEE_OUTPUT_DIR=${OUTPUT_DIR}/mee
DRIVER_OUTPUT_DIR=${OUTPUT_DIR}/driver
DB_OUTPUT_DIR=${OUTPUT_DIR}/db

# Create the directories we will need.
make_directories
if [ "${CONFIGFILE}" = "" ]; then
	if [ ${STATS} -eq 1 ] && [ ${DBAAS} -ne 1 ] && \
			[ ! "${DB_HOSTNAME}" = "" ] && \
			[ ! "${DB_HOSTNAME}" = "localhost" ]; then
		make_directories "${DB_HOSTNAME}"
		rsync -a -e "ssh" --delete "${DB_OUTPUT_DIR}/" \
			"${DB_HOSTNAME}:${DB_OUTPUT_DIR}/"
	fi
fi

# Create a readme file in the output directory and date it.
date >> ${OUTPUT_DIR}/readme.txt
echo "${COMMENT}" >> ${OUTPUT_DIR}/readme.txt
uname -a >> ${OUTPUT_DIR}/readme.txt
echo "Command line: $0 $@" >> ${OUTPUT_DIR}/readme.txt

# Output run information into the readme.txt.
echo "Database Scale Factor: ${SCALE_FACTOR}" >> ${OUTPUT_DIR}/readme.txt
echo "Database Customer Cardinality: ${CUSTOMERS_TOTAL}" >> ${OUTPUT_DIR}/readme.txt
echo "Test Duration: ${DURATION} seconds" >> ${OUTPUT_DIR}/readme.txt

if [ "${CONFIGFILE}" = "" ]; then
	if [ ${DBAAS} -ne 1 ] && [ ! "${DB_HOSTNAME}" = "" ] && \
			[ ! "${DB_HOSTNAME}" = "localhost" ]; then
		DB_COMMAND="ssh ${DB_HOSTNAME}"
		# Get the OS information from the database system.
		eval "${DB_COMMAND} dbt5 get-os-info -o ${DB_OUTPUT_DIR}"
		eval "${DB_COMMAND} \"uname -a >> ${DB_OUTPUT_DIR}/readme.txt\""
	else
		uname -a >> "${DB_OUTPUT_DIR}/readme.txt"
		dbt5 get-os-info -o "${DB_OUTPUT_DIR}"
	fi

	if [ "${PRIVILEGED}" -eq 1 ]; then
		# Restart database.
		eval "${DB_COMMAND} dbt5-${DBMS}-stop-db"
		if [ ! "${DB_HOSTNAME}" = "" ] && \
				[ ! "${DB_HOSTNAME}" = "localhost" ]; then
			eval "${DB_COMMAND} dbt5-${DBMS}-start-db -p \"${DB_PARAMS}\" \
					-o ${DB_OUTPUT_DIR}" || exit 1
		else
			eval "dbt5-${DBMS}-start-db -p ${DB_PARAMS} -o ${DB_OUTPUT_DIR}" \
					|| exit 1
		fi
	fi
fi

cat << EOF
# DBT-5

Workload consists of 4 stages:

1. Start of the Brokerage House server
2. Start of the Market Exchange server
3. Test (Start of the Customer Emulator)
4. Processing of results

Results will be found in: ${OUTPUT_DIR}
EOF

#
# Start the Brokerage House server.
#
echo
echo "## 1. Starting Brokerage House server"
echo

if [ "${CONFIGFILE}" = "" ]; then
	eval "${EGENHOME}/bin/BrokerageHouseMain ${DB_HOSTNAME_ARG} -d ${DB_NAME} \
			${DB_PORT_ARG} -o ${BH_OUTPUT_DIR} > ${BH_OUTPUT_DIR}/bh.out 2>&1" &
else
	BROKERAGES="$(toml get "${CONFIGFILE}" . | jq -r '.brokerage | length')"

	printf "Starting up %d brokerage house(s):\n\n" "${BROKERAGES}"

	for INDEX in $(seq 0 $(( BROKERAGES - 1 ))); do
		BROKERAGE_HOSTNAME="$(toml get "${CONFIGFILE}" brokerage | \
			jq -r ".[${INDEX}].brokerage_addr")"

		MARKET_HOSTNAME="$(toml get "${CONFIGFILE}" brokerage | \
			jq -r ".[${INDEX}].market_addr")"

		DB_HOSTNAME="$(toml get "${CONFIGFILE}" brokerage | \
			jq -r ".[${INDEX}].database_addr")"
        DB_HOSTNAME_ARG="-h ${DB_HOSTNAME}"

		BROKERAGELIST="${BROKERAGELIST} ${BROKERAGE_HOSTNAME}"
		MARKETLIST="${MARKETLIST} ${MARKET_HOSTNAME}"
		DBLIST="${DBLIST} ${DB_HOSTNAME}"

		BHPORTARG=""
		TMP="$(toml get "${CONFIGFILE}" brokerage | \
			jq -r ".[${INDEX}].brokerage_port")"
		if [ ! "${TMP}" = "null" ]; then
			BHPORTARG="-l ${TMP}"
		fi

		MEEPORTARG=""
		TMP="$(toml get "${CONFIGFILE}" brokerage | \
			jq -r ".[${INDEX}].market_port")"
		if [ ! "${TMP}" = "null" ]; then
			MEEPORTARG="-M ${TMP}"
		fi

		TMP="$(toml get "${CONFIGFILE}" brokerage | \
			jq -r ".[${INDEX}].database_port")"
		if [ ! "${TMP}" = "null" ]; then
			DB_PORT_ARG="-p ${TMP}"
		fi

		if [ ! "${BROKERAGE_HOSTNAME}" = "localhost" ]; then
			BROKERAGE_COMMAND="${SSH} ${BROKERAGE_HOSTNAME}"
		else
			BROKERAGE_COMMAND=""
		fi

		HOSTNAME="$(eval "${BROKERAGE_COMMAND}" hostname)"

		printf "%d. %s connecting to market %s and db %s.\n" \
				$(( INDEX + 1 )) "${BROKERAGE_HOSTNAME}" "${MARKET_HOSTNAME}" \
				"${DB_HOSTNAME}"

		TMPDIR="${BH_OUTPUT_DIR}/${HOSTNAME}.${INDEX}"
		eval "${BROKERAGE_COMMAND} mkdir -p ${TMPDIR}"
		eval "${BROKERAGE_COMMAND} ${EGENHOME}/bin/BrokerageHouseMain \
				${BHPORTARG} -m ${MARKET_HOSTNAME} ${MEEPORTARG} \
				${DB_HOSTNAME_ARG} -d ${DB_NAME} ${DB_PORT_ARG} \
				-o ${TMPDIR} > ${TMPDIR}/bh.out 2>&1" &
	done
	echo
fi

do_sleep 1 "Giving BrokerageHouseMain 1 second to start up."

#
# Start the Market server.
#
echo
echo "## 2. Starting Market Exchange server"

if [ "${CONFIGFILE}" = "" ]; then
	eval "${EGENHOME}/bin/MarketExchangeMain -c ${CUSTOMERS_INSTANCE} \
			-t ${CUSTOMERS_TOTAL} -i ${EGENHOME}/flat_in -o ${MEE_OUTPUT_DIR} \
			> ${MEE_OUTPUT_DIR}/mee.out 2>&1" &
else
	MARKETS="$(toml get "${CONFIGFILE}" . | jq -r '.market | length')"

	echo
	printf "Starting up %d market exchanges(s):\n\n" "${MARKETS}"

	for INDEX in $(seq 0 $(( MARKETS - 1 ))); do
		MARKET_HOSTNAME="$(toml get "${CONFIGFILE}" market | \
			jq -r ".[${INDEX}].market_addr")"

		BROKERAGE_HOSTNAME="$(toml get "${CONFIGFILE}" market | \
			jq -r ".[${INDEX}].brokerage_addr")"

		MARKETLIST="${MARKETLIST} ${MARKET_HOSTNAME}"
		BROKERAGELIST="${BROKERAGELIST} ${BROKERAGE_HOSTNAME}"

		MEEPORTARG=""
		TMP="$(toml get "${CONFIGFILE}" market | \
			jq -r ".[${INDEX}].market_port")"
		if [ ! "${TMP}" = "null" ]; then
			MEEPORTARG="-l ${TMP}"
		fi

		BHPORTARG=""
		TMP="$(toml get "${CONFIGFILE}" market | \
			jq -r ".[${INDEX}].brokerage_port")"
		if [ ! "${TMP}" = "null" ]; then
			BHPORTARG="-p ${TMP}"
		fi

		if [ ! "${MARKET_HOSTNAME}" = "localhost" ]; then
			MARKET_COMMAND="${SSH} ${MARKET_HOSTNAME}"
		else
			MARKET_COMMAND=""
		fi

		HOSTNAME="$(eval "${MARKET_COMMAND}" hostname)"

		printf "%d. %s connecting to brokerage %s.\n" \
				$(( INDEX + 1 )) "${MARKET_HOSTNAME}" "${BROKERAGE_HOSTNAME}"

		TMPDIR="${MEE_OUTPUT_DIR}/${HOSTNAME}.${INDEX}"
		eval "${MARKET_COMMAND} mkdir -p ${TMPDIR}"
		eval "${MARKET_COMMAND} ${EGENHOME}/bin/MarketExchangeMain \
				${MEEPORTARG} -h ${BROKERAGE_HOSTNAME} ${BHPORTARG} \
				-c ${CUSTOMERS_INSTANCE} -t ${CUSTOMERS_TOTAL} \
				-i ${EGENHOME}/flat_in -o ${TMPDIR} > ${TMPDIR}/mee.out 2>&1" &
	done
fi

# Start collecting data before we start the test.
stat_collection

#
# Start the Customer Driver.
#

echo
echo "## 3. Starting Customer driver(s)"

if [ "${CONFIGFILE}" = "" ]; then
	echo
	echo "* 1 user starting every ${SLEEPY} milliseconds."
	eval "${EGENHOME}/bin/DriverMain -c ${CUSTOMERS_INSTANCE} \
			-t ${CUSTOMERS_TOTAL} -f ${SCALE_FACTOR} -w ${ITD} -d ${DURATION} \
			-y ${SLEEPY} -u ${USERS} -n ${PACING_DELAY} ${SEEDARG} \
			-i ${EGENHOME}/flat_in -o ${DRIVER_OUTPUT_DIR} \
			> ${DRIVER_OUTPUT_DIR}/driver.out 2>&1" &
	DCMPID="${!}"

	echo
	echo "${USERS} user(s) started."
	echo
else
	DRIVERS="$(toml get "${CONFIGFILE}" . | jq -r '.driver | length')"

	echo
	printf "Starting up %d driver(s):\n\n" "${DRIVERS}"

	TOTAL_USERS=0
	for INDEX in $(seq 0 $(( DRIVERS - 1 ))); do
		DRIVER_HOSTNAME="$(toml get "${CONFIGFILE}" driver | \
			jq -r ".[${INDEX}].driver_addr")"

		BROKERAGE_HOSTNAME="$(toml get "${CONFIGFILE}" driver | \
			jq -r ".[${INDEX}].brokerage_addr")"

		U="$(toml get "${CONFIGFILE}" driver | jq -r ".[${INDEX}].users")"
		TOTAL_USERS=$(( TOTAL_USERS + U ))
		if [ "${U}" -gt "${USERS}" ]; then
			USERS="${U}"
		fi

		DRIVERLIST="${DRIVERLIST} ${DRIVER_HOSTNAME}"
		BROKERAGELIST="${BROKERAGELIST} ${BROKERAGE_HOSTNAME}"

		if [ ! "${DRIVER_HOSTNAME}" = "localhost" ]; then
			DRIVER_COMMAND="${SSH} ${DRIVER_HOSTNAME}"
		else
			DRIVER_COMMAND=""
		fi

		HOSTNAME="$(eval "${DRIVER_COMMAND}" hostname)"

		printf "%d. %s connecting to brokerage %s.\n" \
				$(( INDEX + 1 )) "${DRIVER_HOSTNAME}" "${BROKERAGE_HOSTNAME}"

		TMPDIR="${DRIVER_OUTPUT_DIR}/${HOSTNAME}.${INDEX}"
		eval "${DRIVER_COMMAND} mkdir -p ${TMPDIR}"
		eval "${DRIVER_COMMAND} ${EGENHOME}/bin/DriverMain \
				-c ${CUSTOMERS_INSTANCE} -t ${CUSTOMERS_TOTAL} \
				-f ${SCALE_FACTOR} -w ${ITD} -d ${DURATION} -y ${SLEEPY} \
				-u ${U} -n ${PACING_DELAY} ${SEEDARG} -i ${EGENHOME}/flat_in \
				-o ${TMPDIR} > ${TMPDIR}/driver.out 2>&1" &
	done

	echo
	echo "${TOTAL_USERS} user(s) started."
	echo
fi

SLEEP_RAMPUP=`expr ${USERS} + 1`
SLEEP_RAMPUP=`expr ${SLEEP_RAMPUP} \* ${SLEEPY}`
SLEEP_RAMPUP=`expr ${SLEEP_RAMPUP} / 1000`

# Start stats collection
do_sleep "${SLEEP_RAMPUP}" "* User ramp up to finish in ${SLEEP_RAMPUP} s."

# Sleep for the duration of the run.
do_sleep "${DURATION}" "* Test expected to finish in ${DURATION} s."

if [ "${CONFIGFILE}" = "" ]; then
	# Wait for DriverMain to exit
	if [ -n "${DCMPID}" ]; then
		wait "${DCMPID}"
	fi
else
	for SYSTEM in ${DRIVERLIST}; do
		if [ ! "${SYSTEM}" = "localhost" ]; then
			CMD="${SSH} ${SYSTEM}"
		else
			CMD=""
		fi
		eval "${CMD} find ${OUTPUT_DIR}/driver -name \"driver.pid\" -print" | \
				while IFS= read -r PIDFILE; do
			PID=$(eval "${CMD} cat ${PIDFILE}")
			echo
			printf "Waiting for driver (PID %d) to stop on %s." \
					"${PID}" "${SYSTEM}"
			while eval "${CMD} kill -0 ${PID}" 2> /dev/null; do
				printf "."
				sleep 1
			done
			echo
		done
	done
fi

# Stop stats collection.
stat_collection -s

# Run some post processing analyses.
echo
echo "## 4. Processing data"

stop_processes

stop_processes

if [ "${CONFIGFILE}" = "" ]; then
	if [ "${PRIVILEGED}" -eq 1 ]; then
		eval "${DB_COMMAND} dbt5-${DBMS}-stop-db"
	fi

	if [ ${STATS} -eq 1 ] && [ ${DBAAS} -ne 1 ] && \
			[ ! "${DB_HOSTNAME}" = "" ] && \
			[ ! "${DB_HOSTNAME}" = "localhost" ]; then
		rsync -a -e "ssh" --delete "${DB_HOSTNAME}:${DB_OUTPUT_DIR}/" \
				"${DB_OUTPUT_DIR}/"
	fi

	# (No, not the transaction log.)
	if [ -f "${DB_OUTPUT_DIR}/log" ]; then
		chmod 644 "${DB_OUTPUT_DIR}/log"
	fi
else
	if [ ${STATS} -eq 1 ] && [ ${DBAAS} -ne 1 ]; then
		SYSTEMLIST="$(echo "${DBLIST} ${BROKERAGELIST} ${MARKETLIST} ${DRIVERLIST}" | \
				awk -v RS='[[:space:]]+' '!a[$0]++{printf "%s%s", $0, RT}')"
	else
		SYSTEMLIST="$(echo "${BROKERAGELIST} ${MARKETLIST} ${DRIVERLIST}" | \
				awk -v RS='[[:space:]]+' '!a[$0]++{printf "%s%s", $0, RT}')"
	fi
	for SYSTEM in ${SYSTEMLIST}; do
		if [ ! "${SYSTEM}" = "localhost" ]; then
			rsync -a -e "${SSH}" "${SYSTEM}:${OUTPUT_DIR}/" "${OUTPUT_DIR}/"
		fi
	done
fi

RESULTSFILE="${OUTPUT_DIR}/summary.rst"
MIXFILES="$(find "${OUTPUT_DIR}" -type f -name 'mix*.log' -print0 | xargs -0)"
# shellcheck disable=SC2086
dbt5-post-process --customers="${CUSTOMERS_TOTAL}" ${MIXFILES} \
		> "${RESULTSFILE}" 2> "${OUTPUT_DIR}/post-process.log"

METRIC="$(grep "Reported Throughput" "${RESULTSFILE}" | awk '{print $3}')"
cat << EOF

## Primary Metric

${METRIC} TRTPS

Complete results are in: ${OUTPUT_DIR}
EOF
